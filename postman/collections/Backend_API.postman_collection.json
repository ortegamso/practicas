{
	"info": {
		"_postman_id": "${collection_id}",
		"name": "Crypto Trading Bot - Backend API",
		"description": "Postman collection for testing the backend API of the Crypto Trading Bot platform.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "YOUR_EXPORTER_ID"
	},
	"item": [
		{
			"name": "00 - Health Check",
			"item": [
				{
					"name": "Get API Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Checks the health status of the backend API."
					},
					"response": [],
					"_postman_previewlanguage": "json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains status UP\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('UP');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Endpoints for checking API health and status."
		},
		{
			"name": "01 - Authentication",
			"item": [
				{
					"name": "Register New User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser_${Date.now()}\",\n  \"email\": \"user_${Date.now()}@example.com\",\n  \"password\": \"{{user_password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Registers a new standard user. Uses dynamic username/email to allow re-running."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 - User Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains user and token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.be.an('object');",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    // Optionally save this new user's ID if needed for other tests",
                                    "    if(jsonData.user && jsonData.user.id) {",
                                    "        pm.environment.set(\"created_user_id\", jsonData.user.id);",
                                    "        console.log('Saved created_user_id: ' + jsonData.user.id);",
                                    "    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
                {
					"name": "Register Admin User (Manual/Seed First)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"adminuser_${Date.now()}\",\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\",\n  \"roles\": [\"admin\", \"user\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Registers an admin user. In a real system, admin creation might be restricted or done via seeding. This request assumes the /auth/register endpoint allows role assignment if the request is permissible (e.g. first admin, or by another admin)."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 - Admin User Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// No token saving here, login separately"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emailOrUsername\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Logs in a standard user and saves the JWT token to environment variable 'user_jwt_token'."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - Login Successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains token and sets environment variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    pm.environment.set(\"user_jwt_token\", jsonData.token);",
									"    console.log('User JWT Token set.');",
                                    "    if(jsonData.user && jsonData.user.id) {",
                                    "        pm.environment.set(\"user_id\", jsonData.user.id);",
                                    "        console.log('User ID set: ' + jsonData.user.id);",
                                    "    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emailOrUsername\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Logs in an admin user and saves the JWT token to environment variable 'admin_jwt_token'."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - Admin Login Successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains token and sets admin environment variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    pm.environment.set(\"admin_jwt_token\", jsonData.token);",
									"    console.log('Admin JWT Token set.');",
                                    "    if(jsonData.user && jsonData.user.id) {",
                                    "        pm.environment.set(\"admin_id\", jsonData.user.id);",
                                    "        console.log('Admin ID set: ' + jsonData.user.id);",
                                    "    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get My Profile (User)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{ "key": "token", "value": "{{user_jwt_token}}", "type": "string" }
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Retrieves the profile of the currently authenticated user (using 'user_jwt_token')."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - Profile Retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains user profile data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('string');",
									"    pm.expect(jsonData.email).to.eql(pm.environment.get('user_email'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "User authentication, registration, and profile management."
		}
	],
	"event": [],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:4000/api/v1",
			"type": "string"
		}
	]
}
